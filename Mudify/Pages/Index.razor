@page "/"
@using Mudify.Core.Entities
@using Mudify.Core.Services
@using YoutubeExplode.Search
@inject Youtube youtube
@inject ISnackbar snackbar
@inject Audio audio

<PageTitle>Index</PageTitle>

<div class="search-container">
    <MudTextField @bind-Value="@search" Label="Search" Variant="Variant.Outlined" Immediate="true"></MudTextField>
    <MudButton Variant="Variant.Filled" Color="Color.Tertiary" Disabled="@string.IsNullOrEmpty(search)" DisableElevation="true" Class="btn" OnClick="@(() => SearchVideosAsync())">Search</MudButton>
</div>

<MudSimpleTable Hover="true" Elevation="5" Class="table">
    <tbody>
        @foreach (VideoSearchResult video in videos)
        {
            <tr @onclick="@(() => PlayAsync(video))">
                <td>@video.Author</td>
                <td>@video.Title</td>
                <td>@video.Duration</td>
            </tr>
        }
    </tbody>
</MudSimpleTable>

<div class="flex-container">
    <MudCard Class="player" Elevation="5">
        <MudCardContent>
            <MudText Typo="Typo.h6" Class="track">@(audio.Current?.Title ?? "Nothing")</MudText>
        </MudCardContent>
        <MudCardActions Class="body">
            <MudText>@audio.Current?.Position.ToString("hh\\:mm\\:ss")</MudText>
            <div class="input">
                <MudFab StartIcon="@Icons.Material.Filled.ArrowCircleLeft" Size="Size.Small" DisableElevation="true"></MudFab>
                <MudToggleIconButton Toggled="@audio.IsPaused" ToggledChanged="PauseOrResumeAsync" Icon="@Icons.Material.Filled.PlayCircle" ToggledIcon="@Icons.Material.Filled.PauseCircle"></MudToggleIconButton>
                <MudFab StartIcon="@Icons.Material.Filled.ArrowCircleRight" Size="Size.Small" DisableElevation="true"></MudFab>
            </div>
            <MudText>@audio.Current?.Duration.ToString("hh\\:mm\\:ss")</MudText>
        </MudCardActions>
        <MudCardActions Class="progress">
            <MudSlider @bind-Value="@Position" Max="@Duration" Size="Size.Medium" Disabled="true"></MudSlider>
        </MudCardActions>
    </MudCard>
</div>

@code{
    public double Position { get; set; }
    public double Duration { get; set; }

    private IList<VideoSearchResult> videos = new List<VideoSearchResult>();
    private string search;
    private string source;

    protected override Task OnInitializedAsync()
    {
        audio.OnStart += OnStart;
        audio.OnFinished += OnFinished;
        audio.OnProgress += OnProgress;

        return base.OnInitializedAsync();
    }

    private Task OnStart(Track track)
    {
        snackbar.Add($"Now playing: {track.Title}");
        return Task.CompletedTask;
    }

    private async Task OnFinished(Track track)
    {
        snackbar.Add("Track finished!");
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnProgress(Track track)
    {
        Position = track.Position.TotalSeconds;
        Duration = track.Duration.TotalSeconds;
        await InvokeAsync(StateHasChanged);
    }

    private async Task SearchVideosAsync()
    {
        videos.Clear();
        await foreach(VideoSearchResult video in youtube.SearchVideosAsync(search))
        {
            videos.Add(video);
            StateHasChanged();
        }
    }

    private async Task PlayAsync(VideoSearchResult video)
    {
        await audio.PlayAsync(video);
    }

    private async Task PauseOrResumeAsync(bool pause)
    {
        if (pause)
        {
            await audio.PauseAsync();
        }
        else
        {
            await audio.ResumeAsync();
        }
    }
}