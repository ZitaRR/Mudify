@page "/"
@using Mudify.Shared.Entities
@using Mudify.Client.Services
@inject Audio audio
@inject ISnackbar snackbar

<PageTitle>Index</PageTitle>

<div class="search-container">
    <MudTextField @bind-Value="@search" Label="Search" Variant="Variant.Outlined" Immediate="true"></MudTextField>
    <MudButton Variant="Variant.Filled" Color="Color.Tertiary" Disabled="@string.IsNullOrEmpty(search)" DisableElevation="true" OnClick="@(() => audio.SearchAsync(search))" Class="btn">Search</MudButton>
</div>

<MudSimpleTable Hover="true" Elevation="5" Class="table">
    <tbody>
        @foreach (Track track in tracks)
        {
            <tr @onclick="@(() => PlayAsync(track))">
                <td>@track.Author</td>
                <td>@track.Title</td>
                <td>@track.Duration</td>
            </tr>
        }
    </tbody>
</MudSimpleTable>

<div class="flex-container">
    <MudCard Class="player" Elevation="5">
        <MudCardContent>
            <MudText Typo="Typo.h6" Class="track">@(audio.Current?.Title ?? "Nothing")</MudText>
        </MudCardContent>
        <MudCardActions Class="body">
            <MudText>@audio.Current?.Position.ToString("hh\\:mm\\:ss")</MudText>
            <div class="input">
                <MudFab StartIcon="@Icons.Material.Filled.ArrowCircleLeft" Size="Size.Small" DisableElevation="true"></MudFab>
                <MudToggleIconButton Toggled="@audio.IsPaused" ToggledChanged="PauseOrResumeAsync" Disabled="@(audio.Current is null)" Icon="@Icons.Material.Filled.PauseCircle" ToggledIcon="@Icons.Material.Filled.PlayCircle"></MudToggleIconButton>
                <MudFab StartIcon="@Icons.Material.Filled.ArrowCircleRight" Size="Size.Small" DisableElevation="true"></MudFab>
            </div>
            <MudText>@audio.Current?.Duration.ToString("hh\\:mm\\:ss")</MudText>
        </MudCardActions>
        <MudCardActions Class="progress">
            <MudSlider @bind-Value="@Position" Max="@Duration" Size="Size.Medium" Disabled="true"></MudSlider>
        </MudCardActions>
    </MudCard>
</div>

@code{
    public double Position { get; set; }
    public double Duration { get; set; }

    private ICollection<Track> tracks = new List<Track>();
    private string search;

    protected override async Task OnInitializedAsync()
    {
        audio.OnTracksUpdated += async (tracks) =>
        {
            this.tracks = tracks;
            await InvokeAsync(StateHasChanged);
        };

        audio.OnStart += OnStart;
        audio.OnProgress += OnProgress;
        audio.OnFinish += OnFinish;
    }

    private async Task PlayAsync(Track track)
    {
        await audio.PlayAsync(track);
    }

    private async Task PauseOrResumeAsync(bool pause)
    {
        if (pause)
        {
            await audio.PauseAsync();
        }
        else
        {
            await audio.ResumeAsync();
        }
    }

    private Task OnStart(Track track)
    {
        snackbar.Add($"Now playing: {track.Title}");
        Duration = track.Duration.Ticks;
        return Task.CompletedTask;
    }

    private async Task OnProgress(Track track)
    {
        Position = track.Position.Ticks;
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnFinish(Track track)
    {
        snackbar.Add("Track finished!");
        await InvokeAsync(StateHasChanged);
    }
}
